package ${ENTITY.packageName}.dao;
// GENERATED CODE. DO NOT MODIFY THIS FILE.

// base java packages
import java.util.List; 

// javax packages 
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

// spring 
import org.springframework.stereotype.Repository;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.transaction.annotation.Transactional;

// ---- Project imports
import ${ENTITY.packageName}.entity.${ENTITY.name};
import ${ENTITY.packageName}.interfaces.dao.I${ENTITY.name}Dao;

#foreach ( $import in ${ENTITY.imports} )
import $import;
#end

@Repository
public class ${ENTITY.name}Dao implements I${ENTITY.name}Dao {

	@PersistenceContext
    private EntityManager em;
    
	@Override
	public ${ENTITY.name} findById(Integer id) {
		return em.find(${ENTITY.name}.class, id); 
	}
	
	@Override
	public List<${ENTITY.name}> all() {
		TypedQuery<${ENTITY.name}> query = em.createQuery("SELECT o FROM ${ENTITY.name}_ o", ${ENTITY.name}.class);
        return query.getResultList();    
	} 
	
	@Transactional
	@Override
	public ${ENTITY.name} saveOrUpdate(${ENTITY.name} instance) {
	    if(instance.getId()!=null) {
			return em.merge(instance);
		}
		else {
			em.persist(instance);
			return instance;
		}	
	}
	
	@Transactional
	@Override
	public void delete(${ENTITY.name} instance) {
		if(instance.getId()!=null){
			Query query = em.createQuery("DELETE FROM ${ENTITY.name}_ o WHERE o.id=:id");
			query.setParameter("id", instance.getId());
			query.executeUpdate();
		}
	}
	
#foreach ( $prop in ${ENTITY.properties} )
	/**
	 * see @I${ENTITY.name}Dao
	 */
	public List<${ENTITY.name}> findBy${prop.camelCaseName}(${prop.type} parameter){
		TypedQuery<${ENTITY.name}> tq = em.createQuery("SELECT f FROM ${ENTITY.name}_ f " +
			" WHERE f.${prop.name}=:paramValue", ${ENTITY.name}.class);
		tq.setParameter("paramValue", parameter);
		return tq.getResultList();
	}
	
#end	

	@Override
	public List<${ENTITY.name}> findByExample(${ENTITY.name} sample) {
	
	    CriteriaBuilder builder = em.getCriteriaBuilder();
	    CriteriaQuery<${ENTITY.name}> criteria = builder.createQuery(${ENTITY.name}.class);
	    
	    Root<${ENTITY.name}> root = criteria.from(${ENTITY.name}.class);
		criteria.select(root);
		// checking for not nulls .. 
#foreach ( $prop in ${ENTITY.properties} )
		if(sample.get${display.capitalize($prop.name)}()!=null){
			criteria.where( builder.equal( root.get( "${prop.name}_" ), sample.get${display.capitalize($prop.name)}()));
		}
#end		
		List<${ENTITY.name}> result = em.createQuery( criteria ).getResultList();
		// 
		return result;     
	} 
	
	
}

